prometheusOperator:
  enabled: true

prometheus:
  prometheusSpec:
    retention: 30d
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          resources:
            requests:
              storage: 5Gi
    additionalScrapeConfigs:
      - job_name: "nodejs-demo"
        metrics_path: /metrics
        bearer_token_file: /var/secrets/metrics-token/METRICS_TOKEN
        static_configs:
          - targets: ["nodejs-demo-service.monitoring.svc.cluster.local:80"]

      - job_name: "kubernetes-pods"
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          # Drop EKS-managed control plane pods and other AWS services
          - source_labels:
              [__meta_kubernetes_namespace, __meta_kubernetes_pod_name]
            regex: kube-system;(kube-controller-manager|kube-scheduler|aws-node|coredns|aws-load-balancer-controller|cluster-autoscaler|ebs-csi-.*|efs-csi-.*|vpc-cni-.*)
            action: drop
          # Drop all pods in kube-system namespace (more aggressive approach)
          # - source_labels: [__meta_kubernetes_namespace]
          #   regex: kube-system
          #   action: drop

    containers:
      - name: prometheus
        volumeMounts:
          - name: nodejs-metrics-token
            mountPath: /var/secrets/metrics-token
            readOnly: true
    volumes:
      - name: nodejs-metrics-token
        secret:
          secretName: nodejs-metrics-token
  ingress:
    enabled: false

alertmanager:
  enabled: true
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          resources:
            requests:
              storage: 2Gi
  config:
    global:
      resolve_timeout: 2m
      # smtp_smarthost: "smtp.gmail.com:587"
      # smtp_from: "shamailabbas61@gmail.com" # Replace with your Gmail address
      # smtp_auth_username: "shamailabbas61@gmail.com" # Replace with your Gmail address
      # smtp_auth_password: "oouq oclj fkyf naqg" # Replace with your Gmail App Password
    route:
      group_by: ["alertname", "critical"]
      group_wait: 2m
      group_interval: 2m
      repeat_interval: 2m
      receiver: "slack-and-email" # Changed to use both receivers
      routes:
        - match:
            alertname: Watchdog
          receiver: "slack-and-email"

        # Add more specific routes as needed
    receivers:
      - name: "slack-and-email"
        slack_configs:
          - api_url: "https://hooks.slack.com/services/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"
            channel: "#devops"
            send_resolved: true
            title: "Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"
            text: |
              {{ range .Alerts }}
              *Alert:* {{ .Annotations.summary }}
              *Description:* {{ .Annotations.description }}
              *Severity:* {{ .Labels.severity }}
              *Job:* {{ .Labels.job }}
              *Namespace:* {{ .Labels.namespace }}
              *Instance:* {{ .Labels.instance }}
              {{ end }}
        # email_configs:
        #   - to: "shamaelabbas61@gmail.com" # Replace with recipient email
        #     subject: "[ALERT] {{ .GroupLabels.alertname }} - {{ .Status | toUpper }}"
        #     body: |
        #       Alert Details:
        #       {{ range .Alerts }}
        #       Alert: {{ .Annotations.summary }}
        #       Description: {{ .Annotations.description }}
        #       Severity: {{ .Labels.severity }}
        #       Instance: {{ .Labels.instance }}
        #       Status: {{ .Status }}
        #       Started: {{ .StartsAt }}
        #       {{ if .EndsAt }}Ended: {{ .EndsAt }}{{ end }}

        #       Labels:
        #       {{ range .Labels.SortedPairs }}  {{ .Name }} = {{ .Value }}
        #       {{ end }}

        #       {{ end }}
        # webhook_configs:
        #   - url: "https://qx4t74zj-3000.inc1.devtunnels.ms/grafana-webhook"
        #     send_resolved: true
        #     http_config:
        #       timeout: 10s
        #     title: "Prometheus Alert - {{ .Status | toUpper }}"
        #     text: |
        #       {
        #         "receiver": "{{ .Receiver }}",
        #         "status": "{{ .Status }}",
        #         "alerts": [
        #           {{ range $index, $alert := .Alerts }}{{ if $index }},{{ end }}
        #           {
        #             "status": "{{ $alert.Status }}",
        #             "labels": {
        #               {{ range $key, $value := $alert.Labels }}
        #               "{{ $key }}": "{{ $value }}",
        #               {{ end }}
        #               "dummy": ""
        #             },
        #             "annotations": {
        #               {{ range $key, $value := $alert.Annotations }}
        #               "{{ $key }}": "{{ $value }}",
        #               {{ end }}
        #               "dummy": ""
        #             },
        #             "startsAt": "{{ $alert.StartsAt }}",
        #             "endsAt": "{{ $alert.EndsAt }}",
        #             "generatorURL": "{{ $alert.GeneratorURL }}",
        #             "fingerprint": "{{ $alert.Fingerprint }}"
        #           }{{ end }}
        #         ],
        #         "groupLabels": {
        #           {{ range $key, $value := .GroupLabels }}
        #           "{{ $key }}": "{{ $value }}",
        #           {{ end }}
        #           "dummy": ""
        #         },
        #         "commonLabels": {
        #           {{ range $key, $value := .CommonLabels }}
        #           "{{ $key }}": "{{ $value }}",
        #           {{ end }}
        #           "dummy": ""
        #         },
        #         "commonAnnotations": {
        #           {{ range $key, $value := .CommonAnnotations }}
        #           "{{ $key }}": "{{ $value }}",
        #           {{ end }}
        #           "dummy": ""
        #         },
        #         "externalURL": "{{ .ExternalURL }}",
        #         "version": "4",
        #         "groupKey": "{{ .GroupKey }}",
        #         "truncatedAlerts": {{ .TruncatedAlerts }}
        #       }

grafana:
  enabled: true
  adminUser: admin
  adminPassword: admin
  service:
    name: prometheus-grafana
    type: ClusterIP
    port: 80
  persistence:
    enabled: true
    storageClassName: gp3
    size: 5Gi
  ingress:
    enabled: false
